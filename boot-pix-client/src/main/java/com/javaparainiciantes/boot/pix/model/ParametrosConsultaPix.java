/*
 * API Pix
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços PIX do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: suporte.ti@bcb.gov.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.javaparainiciantes.boot.pix.model;

import java.util.Objects;

import org.springframework.lang.Nullable;
import java.time.OffsetDateTime;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parâmetros utilizados para a realização de uma consulta de cobranças.
 */
@ApiModel(description = "Parâmetros utilizados para a realização de uma consulta de cobranças.")
@JsonPropertyOrder({
  ParametrosConsultaPix.JSON_PROPERTY_INICIO,
  ParametrosConsultaPix.JSON_PROPERTY_FIM,
  ParametrosConsultaPix.JSON_PROPERTY_CPF,
  ParametrosConsultaPix.JSON_PROPERTY_CNPJ,
  ParametrosConsultaPix.JSON_PROPERTY_TX_ID,
  ParametrosConsultaPix.JSON_PROPERTY_PAGINACAO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-10-06T23:21:02.042427800-03:00[America/Sao_Paulo]")
public class ParametrosConsultaPix {
  public static final String JSON_PROPERTY_INICIO = "inicio";
  private OffsetDateTime inicio;

  public static final String JSON_PROPERTY_FIM = "fim";
  private OffsetDateTime fim;

  public static final String JSON_PROPERTY_CPF = "cpf";
  private String cpf = null;

  public static final String JSON_PROPERTY_CNPJ = "cnpj";
  private String cnpj = null;

  public static final String JSON_PROPERTY_TX_ID = "txId";
  private String txId;

  public static final String JSON_PROPERTY_PAGINACAO = "paginacao";
  private Paginacao paginacao;


  public ParametrosConsultaPix inicio(OffsetDateTime inicio) {
    
    this.inicio = inicio;
    return this;
  }

   /**
   * Data inicial utilizada na consulta. Respeita RFC 3339.
   * @return inicio
  **/
  @ApiModelProperty(example = "2020-04-01T00:00Z", required = true, value = "Data inicial utilizada na consulta. Respeita RFC 3339.")
  @JsonProperty(JSON_PROPERTY_INICIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getInicio() {
    return inicio;
  }


  public void setInicio(OffsetDateTime inicio) {
    this.inicio = inicio;
  }


  public ParametrosConsultaPix fim(OffsetDateTime fim) {
    
    this.fim = fim;
    return this;
  }

   /**
   * Data de fim utilizada na consulta. Respeita RFC 3339.
   * @return fim
  **/
  @ApiModelProperty(example = "2020-04-01T17:00Z", required = true, value = "Data de fim utilizada na consulta. Respeita RFC 3339.")
  @JsonProperty(JSON_PROPERTY_FIM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getFim() {
    return fim;
  }


  public void setFim(OffsetDateTime fim) {
    this.fim = fim;
  }


  public ParametrosConsultaPix cpf(String cpf) {
    
    this.cpf = cpf;
    return this;
  }

   /**
   * Get cpf
   * @return cpf
  **/
  @Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CPF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCpf() {
    return cpf;
  }


  public void setCpf(String cpf) {
    this.cpf = cpf;
  }


  public ParametrosConsultaPix cnpj(String cnpj) {
    
    this.cnpj = cnpj;
    return this;
  }

   /**
   * Get cnpj
   * @return cnpj
  **/
  @Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CNPJ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCnpj() {
    return cnpj;
  }


  public void setCnpj(String cnpj) {
    this.cnpj = cnpj;
  }


  public ParametrosConsultaPix txId(String txId) {
    
    this.txId = txId;
    return this;
  }

   /**
   * # Identificador da transação  O campo txid, obrigatório, determina o identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como &#x60;TransactionIdentification &lt;txId&gt;&#x60; ou &#x60;idConciliacaoRecebedor&#x60;. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e,  depois de confirmado o pagamento, é enviado para o SPI via pacs.008.  Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais  do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor,  informando que um pagamento específico foi liquidado.  O txid é criado exclusivamente pelo usuário recebedor e está sob sua responsabilidade. O txid, no contexto de representação de uma cobrança, é único por CPF/CNPJ do usuário recebedor. Cabe ao  PSP recebedor validar essa regra na API PIX. 
   * @return txId
  **/
  @Nullable
  @ApiModelProperty(value = "# Identificador da transação  O campo txid, obrigatório, determina o identificador da transação. O objetivo desse campo é ser um elemento que possibilite ao PSP do recebedor apresentar ao usuário recebedor a funcionalidade de conciliação de pagamentos.  Na pacs.008, é referenciado como `TransactionIdentification <txId>` ou `idConciliacaoRecebedor`. O preenchimento do campo txid é limitado a 35 caracteres na pacs.008.  Em termos de fluxo de funcionamento, o txid é lido pelo aplicativo do PSP do pagador e,  depois de confirmado o pagamento, é enviado para o SPI via pacs.008.  Uma pacs.008 também é enviada ao PSP do recebedor, contendo, além de todas as informações usuais  do pagamento, o txid. Ao perceber um recebimento dotado de txid, o PSP do recebedor está apto a se comunicar com o usuário recebedor,  informando que um pagamento específico foi liquidado.  O txid é criado exclusivamente pelo usuário recebedor e está sob sua responsabilidade. O txid, no contexto de representação de uma cobrança, é único por CPF/CNPJ do usuário recebedor. Cabe ao  PSP recebedor validar essa regra na API PIX. ")
  @JsonProperty(JSON_PROPERTY_TX_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTxId() {
    return txId;
  }


  public void setTxId(String txId) {
    this.txId = txId;
  }


  public ParametrosConsultaPix paginacao(Paginacao paginacao) {
    
    this.paginacao = paginacao;
    return this;
  }

   /**
   * Get paginacao
   * @return paginacao
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PAGINACAO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Paginacao getPaginacao() {
    return paginacao;
  }


  public void setPaginacao(Paginacao paginacao) {
    this.paginacao = paginacao;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParametrosConsultaPix parametrosConsultaPix = (ParametrosConsultaPix) o;
    return Objects.equals(this.inicio, parametrosConsultaPix.inicio) &&
        Objects.equals(this.fim, parametrosConsultaPix.fim) &&
        Objects.equals(this.cpf, parametrosConsultaPix.cpf) &&
        Objects.equals(this.cnpj, parametrosConsultaPix.cnpj) &&
        Objects.equals(this.txId, parametrosConsultaPix.txId) &&
        Objects.equals(this.paginacao, parametrosConsultaPix.paginacao);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inicio, fim, cpf, cnpj, txId, paginacao);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParametrosConsultaPix {\n");
    sb.append("    inicio: ").append(toIndentedString(inicio)).append("\n");
    sb.append("    fim: ").append(toIndentedString(fim)).append("\n");
    sb.append("    cpf: ").append(toIndentedString(cpf)).append("\n");
    sb.append("    cnpj: ").append(toIndentedString(cnpj)).append("\n");
    sb.append("    txId: ").append(toIndentedString(txId)).append("\n");
    sb.append("    paginacao: ").append(toIndentedString(paginacao)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

