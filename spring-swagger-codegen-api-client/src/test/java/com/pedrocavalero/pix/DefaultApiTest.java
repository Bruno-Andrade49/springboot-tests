/*
 * pix_recebimentos
 * APis Pix Recebimentos para Clientes (regulatórias). 
 *
 * OpenAPI spec version: 1.40.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pedrocavalero.pix;

import com.pedrocavalero.pix.model.Cobranca;
import com.pedrocavalero.pix.model.CobrancaPatchRequest;
import com.pedrocavalero.pix.model.CobrancaPatchResponse;
import com.pedrocavalero.pix.model.CobrancaPutRequest;
import com.pedrocavalero.pix.model.CobrancaPutResponse;
import com.pedrocavalero.pix.model.Cobrancas;
import com.pedrocavalero.pix.model.DevolucaoPix;
import com.pedrocavalero.pix.model.DevolucaoPutRequest;
import com.pedrocavalero.pix.model.DevolucaoPutResponse;
import com.pedrocavalero.pix.model.Pix;
import com.pedrocavalero.pix.model.Pixs;
import com.pedrocavalero.pix.model.Qrcode;
import com.pedrocavalero.pix.model.Webhook;
import com.pedrocavalero.pix.model.Webhooks;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Operação responsável por deletar webhook para aviso de recebimentos pix por chave
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dELETEWebhookchaveTest() {
        String chave = null;
        String xCorrelationID = null;
        api.dELETEWebhookchave(chave, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCobTest() {
        String inicio = null;
        String fim = null;
        String cpf = null;
        String cnpj = null;
        String status = null;
        String paginacaoPaginaAtual = null;
        String paginacaoItensPorPagina = null;
        String xCorrelationID = null;
        Cobrancas response = api.gETCob(inicio, fim, cpf, cnpj, status, paginacaoPaginaAtual, paginacaoItensPorPagina, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por recuperar os dados do documento pelo id transacional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCobtxidTest() {
        String txid = null;
        String revisao = null;
        String xCorrelationID = null;
        Cobranca response = api.gETCobtxid(txid, revisao, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por recuperar os dados do documento
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETCobtxidqrcodeTest() {
        String txid = null;
        String xCorrelationID = null;
        Qrcode response = api.gETCobtxidqrcode(txid, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPixTest() {
        String inicio = null;
        String fim = null;
        String txid = null;
        String cpf = null;
        String cnpj = null;
        String paginacaoPaginaAtual = null;
        String paginacaoItensPorPagina = null;
        String xCorrelationID = null;
        Pixs response = api.gETPix(inicio, fim, txid, cpf, cnpj, paginacaoPaginaAtual, paginacaoItensPorPagina, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por recuperar os dados do documento pelo id transacional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPixe2eidTest() {
        String e2eid = null;
        String xCorrelationID = null;
        Pix response = api.gETPixe2eid(e2eid, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsavel por resgatar um pagamento específico para o PIX.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETPixe2eiddevolucaoidTest() {
        String e2eid = null;
        String id = null;
        String xCorrelationID = null;
        DevolucaoPix response = api.gETPixe2eiddevolucaoid(e2eid, id, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por resgatar webhooks de aviso de recebimentos pix para um parceiro
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETWebhookTest() {
        String inicio = null;
        String fim = null;
        String paginacaoPaginaAtual = null;
        String paginacaoItensPorPagina = null;
        String xCorrelationID = null;
        String statusCode = null;
        Webhooks response = api.gETWebhook(inicio, fim, paginacaoPaginaAtual, paginacaoItensPorPagina, xCorrelationID, statusCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por resgatar webhook de aviso de recebimentos pix por chave
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gETWebhookchaveTest() {
        String chave = null;
        String xCorrelationID = null;
        Webhook response = api.gETWebhookchave(chave, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por revisar uma cobranca
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pATCHCobtxidTest() {
        String txid = null;
        CobrancaPatchRequest body = null;
        String xCorrelationID = null;
        CobrancaPatchResponse response = api.pATCHCobtxid(txid, body, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por incluir uma nova cobranca
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pUTCobtxidTest() {
        String txid = null;
        CobrancaPutRequest body = null;
        String xCorrelationID = null;
        CobrancaPutResponse response = api.pUTCobtxid(txid, body, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por solicitar um nova devolução, por meio do e2eid e do ID da devolução
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pUTPixe2eiddevolucaoidTest() {
        String e2eid = null;
        String id = null;
        DevolucaoPutRequest body = null;
        String xCorrelationID = null;
        DevolucaoPutResponse response = api.pUTPixe2eiddevolucaoid(e2eid, id, body, xCorrelationID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Operação responsável por cadastrar webhook para aviso de recebimentos pix por chave
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pUTWebhookchaveTest() {
        String chave = null;
        Webhook body = null;
        String xCorrelationID = null;
        api.pUTWebhookchave(chave, body, xCorrelationID);

        // TODO: test validations
    }
    
}
